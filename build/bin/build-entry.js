/***
 * 可以自动生成./src/index.js文件，避免开发者手动的去index.js导入、注册、导出组件
 * 开发者只需要正确的配置根目录下的components.json即可
 * ***/
// 所有组件的路径信息
var Components = require('../../components.json');
var fs = require('fs');
// 操作字符串模板
var render = require('json-templater/string');
// 将短横线命名转换为大驼峰命名，com-name转为ComName
var uppercamelcase = require('uppercamelcase');
var path = require('path');
// 操作系统特定的行末标志。
var endOfLine = require('os').EOL;

// index.js的输出路径
var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');
// 导入单个组件的模板语句，import CompName from '../packages/comp-name/index.js'
var IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\';';
// 组件名
var INSTALL_COMPONENT_TEMPLATE = '  {{name}}';
// index.js的模板内容
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}
import locale from 'element-ui/src/locale';
import CollapseTransition from 'element-ui/src/transitions/collapse-transition';

const components = [
{{install}},
  CollapseTransition
];

const install = function(Vue, opts = {}) {
  locale.use(opts.locale);
  locale.i18n(opts.i18n);

  components.forEach(component => {
    Vue.component(component.name, component);
  });

  Vue.use(InfiniteScroll);
  Vue.use(Loading.directive);

  Vue.prototype.$ELEMENT = {
    size: opts.size || '',
    zIndex: opts.zIndex || 2000
  };

  Vue.prototype.$loading = Loading.service;
  Vue.prototype.$msgbox = MessageBox;
  Vue.prototype.$alert = MessageBox.alert;
  Vue.prototype.$confirm = MessageBox.confirm;
  Vue.prototype.$prompt = MessageBox.prompt;
  Vue.prototype.$notify = Notification;
  Vue.prototype.$message = Message;

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  locale: locale.use,
  i18n: locale.i18n,
  install,
  CollapseTransition,
  Loading,
{{list}}
};
`;

// 这句暂时没弄懂
delete Components.font;

var ComponentNames = Object.keys(Components);

// 存放的import语句
var includeComponentTemplate = [];
// 存放组件名
var installTemplate = [];
var listTemplate = [];

ComponentNames.forEach(name => {
  // 转换为大驼峰，例如：button转为Button
  var componentName = uppercamelcase(name);

  // 存储import语句，例如：import Button from '../packages/button/index.js
  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }));

  // 除开挂载到原型上的几个组件，其他组件的组件的组件名存储起来
  if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {
    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName,
      component: name
    }));
  }

  // 除开Loading组件，其他组件的组件名存储起来
  if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`);
});

var template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(',' + endOfLine),
  version: process.env.VERSION || require('../../package.json').version,
  list: listTemplate.join(',' + endOfLine)
});

// 写入内容
fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);

